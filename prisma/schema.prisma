// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}
enum Branch{
  CSE
  ECE
  ME
  CE
  EE
  IT
  MCA
  MBA
}
enum Position{
  Member
  Lead
  Vice_Lead
  Tech_Lead
  PR_Lead
  CR_Lead
  Executive
  Creative_Lead
  Design_Lead
  Ar_Lead
  Web_Lead 
  App_Lead
  Vr_Lead
}

enum Year_Of_Joinning{
  Y_2020
  Y_2021
  Y_2022
  Y_2023
  Y_2024
  Y_2025
}

enum Current_Year_Of_Student{
  First
  Second
  Third
  Fourth
}

enum domain{
  web
 app
 cloud
 cyber
 ml
 video_editing
 graphics_designing
 content_writing
 marketing
 finance
 public_relations
 creative
 design
}

enum gender{
  male
  female
  other
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?  // name  of the member
  email         String   @unique
  password      String
  role          UserRole @default(USER) // for proviidng the role of the user
  image         String?
  roll_number   String?
  phone       String?
  current_year Current_Year_Of_Student? @default(First)
  branch       Branch @default(CSE)
  year_of_joining   Year_Of_Joinning   @default(Y_2021)
  position    Position @default(Member)
  github       String?
  linkedin     String?
  twitter      String?
  instagram    String?
  facebook     String?
  personal_email String?
  domain      domain @default(web)
  event       Event[] 
  gender      gender @default(male)

  // projects
  project_contribution Projects[]
  project_team Projects[]
}


model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  date                    String
  target_year             Current_Year_Of_Student @default(First)
  duration                Int?
  expected_participants   String    @default("500")
  actual_participants     String   @default("upcoming")
  location                String?
  event_thumbnail         String?
  created_By              User? @relation(fields: [created_by], references: [id], onDelete: Cascade)
  created_by              String?    @db.ObjectId
  //updated_By              User? @relation(name: "UpdatedBy", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: Cascade)
  //updated_by              String?    @db.ObjectId
  created_at              DateTime @default(now())
  updated_at              DateTime? @updatedAt
}


enum status{
  not_started // project is not started
  started // project is just started
  ongoing // project is ongoing
  completed // project is completed
  halted // project stopped for temporary time limit
  discarded // project discarded by the team
}

model Projects{
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  project_name String
  project_domain domain @default(web)
  project_description String
  project_poc User @relation(fields: [id], references: [id]) 
  assigned_by User @relation(fields: [id], references:[id])
  start_date DateTime
  end_date DateTime
  created_at DateTime @default(now())
  status status @default(not_started)
  project_members User[]
  // project_resources 
  // progress -> progress of how much the project is completed
  // tasks -> array
  // project_image
}